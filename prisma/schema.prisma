// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  phone     String
  isOwner   Boolean    @default(false)
  centreId  Int?       @unique
  centre    Centres?   @relation(fields: [centreId], references: [id], onDelete: SetNull)
  students  Students[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Levels {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  type      SchoolStady @default(LYCEE)
  students  Students[]
  subjects  Subjects[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Students {
  id               Int         @id @default(autoincrement())
  firstName        String
  lastName         String
  phoneParent      String
  phone            String
  sex              Sex
  school           SchoolStady @default(LYCEE)
  registrationDate DateTime    @default(now())
  registredBy      Int?
  user             Users?      @relation(fields: [registredBy], references: [id], onDelete: SetNull)
  levelId          Int?
  level            Levels?     @relation(fields: [levelId], references: [id], onDelete: SetNull)
  centreId         Int?
  centre           Centres?    @relation(fields: [centreId], references: [id], onDelete: SetNull)

  subjects  Subjects[]
  payments  Payments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Centres {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  location  String
  color     String     @unique
  user      Users?
  students  Students[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Subjects {
  id            Int         @id @default(autoincrement())
  name          String
  pricePerMonth Float
  level         Levels?     @relation(fields: [levelId], references: [id], onDelete: SetNull)
  levelId       Int?
  students      Students[]
  school        SchoolStady @default(LYCEE)
  teacherId     Int?
  teacher       Teachers?   @relation(fields: [teacherId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, levelId])
}

model Payments {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Students @relation(fields: [studentId], references: [id], onDelete: Cascade)
  month       String
  totalAmount Float
  amountPaid  Float
  amountDue   Float
  discount    Float
  startAt     DateTime
  dueDate     DateTime
  have50      Int?     @default(0)
  subjects    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Teachers {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  email     String
  sex       Sex
  // dues      Dues[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Subjects  Subjects[]
}

// model Dues {
//   id          Int       @id @default(autoincrement())
//   teacherId   Int
//   teacher     Teachers  @relation(fields: [teacherId], references: [id])
//   month       String
//   totalAmount Float
//   salary      Float
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

enum Sex {
  HOMME
  FEMME
}

enum SchoolStady {
  COLLEGE
  LYCEE
  ECOLE_PRIMAIRE
}
